class Solution {
    public void union(int u,int v,int[] parent,int []size){
        int lu=find(u,parent);
        int lv=find(v,parent);
        if(lv==lu) return;
        if(size[lv]>size[lu]){
            parent[lu]=lv;
            size[lv]+=size[lu];
        }else{
            parent[lv]=lu;
            size[lu]+=size[lv];
        }
    }
    public int find(int val,int[] parent){
        if(val==parent[val]) return val;
        return parent[val]=find(parent[val],parent);
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n=graph.length;
        int[] parent=new int[n];
        int[] size=new int[n];
        Arrays.sort(initial);
        for(int i=0;i<n;i++){
            parent[i]=i;
            size[i]=1;
        }
        Set<Integer> set=new HashSet<>();
        for(int i:initial) set.add(i);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==1 && i!=j && !set.contains(i) && !set.contains(j)) union(i,j,parent,size);
            }
        }
        Map<Integer,HashSet<Integer>> map=new HashMap<>();
        int[] infected=new int[n];
        for(int i:initial){
            map.put(i,new HashSet<>());
            for(int j=0;j<n;j++){
                if(graph[i][j]==1 && i!=j && !set.contains(j)){
                    int par=find(j,parent);
                    if(!map.get(i).contains(par)){
                        map.get(i).add(par);
                        infected[par]++;
                    }
                }
            }
        }
        int result=-1,maxInfected=-1;
        for(int i:initial){
            HashSet<Integer> parents=map.get(i);
            int total=0;
            for(int par:parents){
                if(infected[par]==1){
                    total+=size[par];
                }
            }
            if(total>maxInfected){
                result=i;
                maxInfected=total;
            }
        }
        return result==-1?initial[0]:result;
    }
}