class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n=graph.length;
        int[] parent=new int[n];
        int size[]=new int[n];
        for(int i=0;i<n;i++){
            parent[i]=i;
            size[i]=1;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i!=j && graph[i][j]==1) union(i,j,parent,size);
            }
        }
        int[] infected=new int[n];
        Arrays.sort(initial);
        for(int i:initial){
            int par=find(i,parent);
            infected[par]++;
        }
        int ans=-1,maxRemovable=-1;
        for(int i:initial){
            int par=find(i,parent);
            if(infected[par]==1 && maxRemovable<size[par]){
                ans=i;
                maxRemovable=size[par];
            }
        }
        return ans==-1?initial[0]:ans;
    }
    public void union(int u,int v,int[] parent,int[] size){
        int lu=find(u,parent);
        int lv=find(v,parent);
        if(lu==lv) return;
        if(size[lv]>size[lu]){
            parent[lu]=lv;
            size[lv]+=size[lu];
        }else{
            parent[lv]=lu;
            size[lu]+=size[lv];
        }
    }
    public int find(int val,int[] parent){
        if(parent[val]==val) return val;
        return parent[val]=find(parent[val],parent);
    }
}